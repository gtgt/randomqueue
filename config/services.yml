imports:
    - { resource: "parameters.yml" }

services:

    ##
    # Container configuration
    #

    _defaults:
        autowire: true
        autoconfigure: true
        public: false


    ##
    # Console application
    #

    Symfony\Component\Console\Application:
        public: true


    ##
    # Database
    #

    PDO:
        class: PDO
        arguments:
            - '%db.dsn%'
            - '%db.user%'
            - '%db.password%'


    ##
    # Loggers
    #

    Symfony\Component\Console\Output\ConsoleOutput: ~

    logger.db:
        class: RandomQueue\Log\DatabaseLogger
        arguments:
            $level: !php/const RandomQueue\Log\DatabaseLogger::DEBUG

    logger.console:
        class: Symfony\Component\Console\Logger\ConsoleLogger
        arguments:
            $output: '@Symfony\Component\Console\Output\ConsoleOutput'

    # default logger
    Psr\Log\LoggerInterface: '@logger.db'


    ##
    # RabbitMQ
    #

    PhpAmqpLib\Connection\AbstractConnection: '@rabbitmq.connection'

    rabbitmq.connection:
        class: PhpAmqpLib\Connection\AMQPLazyConnection
        arguments:
            $host: '%env(SERVER_NAME)%'
            $port: 5672
            $user: '%env(RABBITMQ_USER)%'
            $password: '%env(RABBITMQ_PASSWORD)%'


    ##
    # Event dispatcher
    #

    Symfony\Component\EventDispatcher\EventDispatcherInterface: '@event_dispatcher'

    event_dispatcher:
        class: Symfony\Component\EventDispatcher\EventDispatcher


    ##
    # Mail
    #

    mail.transport:
        class: Swift_SendmailTransport

    mailer:
        class: Swift_Mailer
        arguments:
            - '@mail.transport'


    ##
    # Application services
    #

    RandomQueue\:
        resource: '../src/*'

    RandomQueue\Queue\Worker:
        public: true
        arguments:
            $connection: '@rabbitmq.connection'
            $channelName: '%rabbitmq.channel%'


    RandomQueue\Command\QueueConsumerCommand:
        tags:
            - { name: 'console.command', command: 'queue:consumer' }


    RandomQueue\Command\QueueJobAddCommand:
        tags:
            - { name: 'console.command', command: 'queue:job:add' }

    RandomQueue\EventSubscriber\JobFailedSubscriber:
        arguments:
            $mailer: '@mailer'
            $notifyEmail: '%email.admin%'
        tags:
            - { name: 'kernel.event_subscriber' }
