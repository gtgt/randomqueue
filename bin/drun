#!/bin/bash

set -e
set -u
set -o pipefail

COMMAND=${1:-"help"}
NAME_PREFIX=randomqueue
ROOT_DIR=$(realpath $(dirname $0)/..)
. "${ROOT_DIR}/.env"
APP_ENV=${APP_ENV:-"none"}

function app-env() {
    echo ${APP_ENV}
}

function is-prod() {
    [[ ${APP_ENV} == "prod" ]]
}

function get-tag() {
    if is-prod; then
        date +%Y%m%d%H%I
    else
        echo `app-env`
    fi
}

function is-debug() {
    if is-prod; then
        echo "0"
    else
        echo "1"
    fi
}

function compose-file() {
    if is-prod; then
        echo "docker-compose.prod.yml"
    else
        echo "docker-compose.yml"
    fi
}

function ip() {
    docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' ${1:-"${NAME_PREFIX}-php"}
}

function build() {
    docker-compose -f `compose-file` build ${1:-}
}

function up() {
    container=${1:-}
    docker-compose -f `compose-file` up -d ${container}
    if ! is-prod; then
        composer install --prefer-dist
    fi
}

function stop() {
    docker-compose -f `compose-file` stop ${1:-}
}

function rm() {
    docker-compose -f `compose-file` rm ${1:-}
}

function logs() {
    docker-compose -f `compose-file` logs -f ${1:-}
}

function ps() {
    docker-compose -f `compose-file` ps
}

function php() {
    exec consumer php ${@:-"-v"}
}

function sh() {
    exec consumer ${@:-"sh"}
}

function composer() {
    exec php-fpm composer ${@:-""}
    exec consumer composer ${@:-""}
}

function run-test() {
    cleanup
    run-docker php7-cli bin/phpunit
}

function exec() {
    container=${1:-""}
    command=${@:2}
    if [[ "" == "$container" ]]; then
      echo "Usage: $0 container_name [command]"
      exit 1
    fi
    if [[ "" == "$command" ]]; then
      command=sh
    fi
    docker-compose -f `compose-file` exec ${container} ${command}
}

function run() {
    container=${1:-""}
    command=${@:2}
    if [[ "" == "$container" ]]; then
      echo "Usage: $0 container_name [command]"
      exit 1
    fi
    if [[ "" == "$command" ]]; then
      command=sh
    fi
    docker-compose -f `compose-file` run --rm ${container} ${command}
}

function run-docker() {
    context=${1:-""}
    command=${@:2}
    if [[ "" == "$context" ]]; then
      echo "Usage: $0 context [command]"
      exit 1
    fi
    if [[ "" == "$command" ]]; then
      command=sh
    fi
    existing_container_id=$(docker container ls -a -q --filter=name=randomqueue-exec)
    if [[ "" != ${existing_container_id} ]]; then
        docker rm ${existing_container_id}
    fi
    docker run --rm --name="${NAME_PREFIX}-exec" --net=host -v "${ROOT_DIR}:/randomqueue" -it "${NAME_PREFIX}_$context" ${command}
}

function cleanup() {
    #junk_containers=$(docker images -a|grep "<none>"|awk '$1=="<none>" {print $3}')
    junk_containers=$(docker images -f "dangling=true" -q --no-trunc)
    if [[ "" != ${junk_containers} ]]; then
        docker rmi ${junk_containers}
    fi
}

function help() {
    USAGE="$0 "$(compgen -A function | tr "\\n" "|" | sed 's/|$//')
    echo ${USAGE}
}

if [[ "$(type -t ${COMMAND})" != "function" ]]; then
    help
    exit 1
fi

${COMMAND} ${@:2}
